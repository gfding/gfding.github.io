<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>gfding&#39;s notes</title>
  
  <subtitle>Dreams as horse, act your glorious youth.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gfding.com/"/>
  <updated>2019-06-20T04:28:39.949Z</updated>
  <id>https://gfding.com/</id>
  
  <author>
    <name>gfding</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Github Pages和Hexo搭建博客</title>
    <link href="https://gfding.com/2019/06/19/build-blog-by-github-hexo/"/>
    <id>https://gfding.com/2019/06/19/build-blog-by-github-hexo/</id>
    <published>2019-06-19T08:58:46.000Z</published>
    <updated>2019-06-20T04:28:39.949Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍使用Github Pages和Hexo创建个人博客。</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>使用Github Pages的好处：</strong></p><ul><li>静态文件，访问速度快，利于搜索引擎抓取。</li><li>免费（仅限于公共仓库，私有仓库需要按月收费）方便，不需要服务器不需要后台。</li><li>可以绑定域名。</li><li>数据安全，基于github的版本管理。</li><li>博客内容可以轻松打包、转移、发布到其它平台。</li></ul><p><strong>使用Hexo的好处：</strong></p><ul><li>超快速度<br>Node.js所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</li><li>支持 Markdown<br>Hexo 支持 <a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="noopener">GitHub Flavored Markdown</a> 的所有功能，甚至可以整合<a href="http://octopress.org" target="_blank" rel="noopener">Octopress</a>的大多数<a href="https://github.com/imathis/octopress/tree/master/plugins" target="_blank" rel="noopener">插件</a>。</li><li>一键部署<br>只需一条指令即可部署到<a href="https://help.github.com/en#github-pages-basics" target="_blank" rel="noopener">GitHub Pages</a>,<a href="https://www.heroku.com" target="_blank" rel="noopener">Heroku</a>或其他网站。</li><li>丰富的插件<br>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 <a href="www.jade-lang.com">Jade</a>, <a href="coffeescript.org">CoffeeScript</a>。</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>在开始之前，必须已经拥有了github账号（<a href="https://github.com/join" target="_blank" rel="noopener">注册传送门</a>）。</li></ul><p><strong>本文所使用的环境：</strong></p><ul><li>Windows 10 下子系统 Ubuntu 18.04</li><li>node.js v12.4.0</li><li>git v2.17.1</li><li>hexo v3.9.0</li></ul><p><strong>相关资源链接：</strong></p><ul><li>Ubuntu 18.04 子系统：<a href="https://www.microsoft.com/store/productId/9N9TNGVNDL3Q" target="_blank" rel="noopener">https://www.microsoft.com/store/productId/9N9TNGVNDL3Q</a></li><li>Github: <a href="https://github.com" target="_blank" rel="noopener">https://github.com</a></li><li>Hexo主题：<ul><li>官方主题站<br><a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></li><li>yilia 主题<br><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">https://github.com/litten/hexo-theme-yilia</a></li><li>jekyll 主题<br><a href="https://github.com/pinggod/hexo-theme-jekyll" target="_blank" rel="noopener">https://github.com/pinggod/hexo-theme-jekyll</a></li><li>indigo 主题<br><a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="noopener">https://github.com/yscoder/hexo-theme-indigo</a></li></ul></li></ul><h1 id="搭建github博客"><a href="#搭建github博客" class="headerlink" title="搭建github博客"></a>搭建github博客</h1><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>新建一个名为<code>blog.github.io</code>的仓库，其中<code>blog</code>必须为github的用户名。</p><blockquote><p>每个github账户最多只能创建一个使用Github Pages访问的仓库。<br>注册的邮箱一定要验证，否则不会成功。<br>仓库名字必须是username.github.io，其中username是用户名。<br>仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟或更久。<br>创建成功后，默认会在这个仓库里生成一些示例页面，以后网站所有代码都放在这个仓库里。</p></blockquote><h2 id="绑定域名（可选）"><a href="#绑定域名（可选）" class="headerlink" title="绑定域名（可选）"></a>绑定域名（可选）</h2><blockquote><p>官方说明：<a href="https://help.github.com/en/articles/using-a-custom-domain-with-github-pages" target="_blank" rel="noopener">https://help.github.com/en/articles/using-a-custom-domain-with-github-pages</a></p></blockquote><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>在域名解析后台（<a href="https://dns.console.aliyun.com/#/dns/domainList" target="_blank" rel="noopener">阿里云后台传送门</a>）中配置域名解析。<br><strong>以阿里云为例，配置如下：</strong></p><table><thead><tr><th align="center">记录类型</th><th align="center">主机记录</th><th align="center">解析线路（isp)</th><th align="center">记录值</th><th align="center">MX优先级</th><th align="center">TTL</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">@</td><td align="center">默认</td><td align="center">×××.×××.×××.×××</td><td align="center">–</td><td align="center">10 分钟</td></tr><tr><td align="center">CNAME</td><td align="center">www</td><td align="center">默认</td><td align="center">blog.github.io</td><td align="center">–</td><td align="center">10 分钟</td></tr></tbody></table><blockquote><p>其中，A记录的记录值为<code>blog.github.io</code>的IP。</p></blockquote><h3 id="CNAME文件"><a href="#CNAME文件" class="headerlink" title="CNAME文件"></a>CNAME文件</h3><p>在<code>blog.github.io</code>仓库根目录下，新建名为CNAME的文件，里面填写域名。</p><p><strong>域名的格式说明如下：</strong></p><table><thead><tr><th>域名格式</th><th>示例(CNAME内容)</th><th>地址</th><th>自动跳转</th></tr></thead><tbody><tr><td>@</td><td>myblog.com</td><td><a href="http://myblog.com" target="_blank" rel="noopener">http://myblog.com</a></td><td><a href="http://www.myblog.com" target="_blank" rel="noopener">http://www.myblog.com</a> 自动跳转 <a href="http://myblog.com" target="_blank" rel="noopener">http://myblog.com</a></td></tr><tr><td>www</td><td><a href="http://www.myblog.com" target="_blank" rel="noopener">www.myblog.com</a></td><td><a href="http://www.myblog.com" target="_blank" rel="noopener">http://www.myblog.com</a></td><td><a href="http://myblog.com" target="_blank" rel="noopener">http://myblog.com</a> 自动跳转 <a href="http://www.myblog.com" target="_blank" rel="noopener">http://www.myblog.com</a></td></tr><tr><td>二级域名</td><td>blog.myblog.com</td><td><a href="http://blog.myblog.com" target="_blank" rel="noopener">http://blog.myblog.com</a></td><td>不自动跳转</td></tr></tbody></table><blockquote><p>绑定了新域名之后，<code>blog.github.io</code>并没有失效，而是会自动跳转到绑定的域名。</p></blockquote><h3 id="Github设置"><a href="#Github设置" class="headerlink" title="Github设置"></a>Github设置</h3><p>进入<code>blog.github.io</code>，在<code>Settings</code>里填写<code>Custom domain</code>。</p><h2 id="使用https访问博客"><a href="#使用https访问博客" class="headerlink" title="使用https访问博客"></a>使用https访问博客</h2><p>进入<code>blog.github.io</code>，在<code>Settings</code>里勾选<code>Enforce HTTPS</code>，稍等几分钟后生效。配置后，访问 <a href="myblog.com">myblog.com</a> 或 <a href="http://myblog.com" target="_blank" rel="noopener">http://myblog.com</a> 会自动跳转到 <a href="https://myblog.com。" target="_blank" rel="noopener">https://myblog.com。</a></p><h1 id="使用hexo写博客"><a href="#使用hexo写博客" class="headerlink" title="使用hexo写博客"></a>使用hexo写博客</h1><h2 id="hexo简介"><a href="#hexo简介" class="headerlink" title="hexo简介"></a>hexo简介</h2><p>Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。</p><blockquote><p>Hexo官网： <a href="http://hexo.io" target="_blank" rel="noopener">http://hexo.io</a><br>github: <a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">https://github.com/hexojs/hexo</a></p></blockquote><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>使用Markdown编写文章，Hexo将md文件生成静态页面，然后将静态文件提交到Github中，由Github Pages完成展示。</p><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><ul><li>安装Nodejs</li></ul><pre><code class="sh">wget https://nodejs.org/download/release/latest/node-v12.4.0-linux-x64.tar.xztar -C /usr/local --strip-components 1 -xJf node-v12.4.0-linux-x64.tar.xz</code></pre><ul><li>安装git</li></ul><pre><code class="sh">apt-get update -yapt-get upgrade -yapt install git</code></pre><ul><li>安装Hexo</li></ul><pre><code class="sh">npm install -g hexo</code></pre><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ul><li>新建文件夹</li></ul><pre><code class="sh">mkdir ~/blog</code></pre><ul><li>初始化</li></ul><pre><code class="sh">cd ~/bloghexo init</code></pre><p>hexo会自动下载一些文件到这个目录，包括<code>node_modules</code>，目录结构如下图：</p><pre><code class="sh">hexo g # 生成hexo s # 启动服务</code></pre><p>执行以上命令之后，hexo就会在<code>public</code>文件夹生成相关html文件，这些文件将来都是要提交到github去的：</p><p><code>hexo s</code>是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 即可看到内容</p><p>第一次初始化的时候hexo已经帮我们写了一篇名为 <code>Hello World</code> 的文章</p><h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><p>Hexo默认主题是<a href="https://github.com/hexojs/hexo-theme-landscape" target="_blank" rel="noopener">landscape</a>，如果不喜欢可以到<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官方主题</a>查找其他主题。<br>本站使用的主题是<a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="noopener">indigo</a>。</p><ul><li>首先，下载主题</li></ul><pre><code class="sh">cd ~/bloggit clone https://github.com/yscoder/hexo-theme-indigo.git themes/indigo</code></pre><p>下载的主题位于<code>~/blog/themes/</code>下</p><ul><li>下载需要的其他插件</li></ul><pre><code class="sh">cd ~/blognpm install hexo-renderer-less --savenpm install hexo-generator-feed --savenpm install hexo-generator-json-content --savenpm install hexo-helper-qrcode --savenew page tagsnew page categories</code></pre><ul><li>然后，修改_config.yml中的theme: landscape改为theme: indigo，然后重新执行hexo g来重新生成</li></ul><blockquote><p>注意：hexo有2个<code>_config.yml</code>文件，一个是根目录下的全局的<code>_config.yml</code>，一个是各个theme下的，此处需要修改根目录下的<code>_config.yml</code>文件</p></blockquote><p>如果出现问题，可以先执行<code>hexo clean</code>来清理一下<code>public</code>里的内容，然后再重新生成发布</p><h2 id="上传之前"><a href="#上传之前" class="headerlink" title="上传之前"></a>上传之前</h2><p>在上传代码到github之前，一定要记得先把以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把以前的所有代码都删掉。</p><h2 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a>上传到github</h2><p>如果一切都配置好了，发布上传很容易，一句<code>hexo d</code>就搞定，当然关键还是要把所有东西配置好。</p><p>首先，ssh key肯定要配置好。</p><p>其次，配置_config.yml中有关deploy的部分：</p><ul><li>正确写法：</li></ul><pre><code class="json">deploy:  type: git  repository: git@github.com:liuxianan/liuxianan.github.io.git  branch: master</code></pre><ul><li>错误写法：</li></ul><pre><code class="json">deploy:  type: github  repository: https://github.com/liuxianan/liuxianan.github.io.git  branch: master</code></pre><p>后面一种写法是hexo2.x的写法，现在已经不行了，无论是哪种写法，此时直接执行hexo d的话一般会报如下错误：</p><blockquote><p>Deployer not found: github 或者 Deployer not found: git</p></blockquote><ul><li>安装deployer插件</li></ul><pre><code class="sh">npm install hexo-deployer-git --save</code></pre><p>其它命令不确定，部署这个命令一定要用git bash，否则会提示Permission denied (publickey).<br>打开git bash，输入hexo d就会将本次有改动的代码全部提交，没有改动的不会：</p><h2 id="保留CNAME、README-md等文件"><a href="#保留CNAME、README-md等文件" class="headerlink" title="保留CNAME、README.md等文件"></a>保留CNAME、README.md等文件</h2><p>提交之后网页上一看，发现以前其它代码都没了，此时不要慌，一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录的：</p><p>由于hexo默认会把所有md文件都转换成html，包括README.md，所有需要每次生成之后、上传之前，手动将README.md复制到public目录，并删除README.html。</p><h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><p>这里面都是一些全局配置，每个参数的意思都比较简单明了，所以就不作详细介绍了。</p><p>需要特别注意的地方是，冒号后面必须有一个空格，否则可能会出问题。</p><h1 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h1><p>定位到我们的hexo根目录，执行命令：</p><pre><code class="sh">hexo new &#39;my-first-blog&#39;</code></pre><p>hexo会帮我们在_posts下生成相关md文件：</p><p>我们只需要打开这个文件就可以开始写博客了，默认生成如下内容：</p><p>当然也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。</p><p><strong>一般完整格式如下：</strong></p><pre><code class="md"> --- title: postName #文章页面上的显示名称 date: 2013-12-02 15:30:16 #文章生成时间 categories: 默认分类 #分类 tags: [tag1,tag2,tag3] #文章标签 description: 会出现在meta的description里面 --- [以下是正文]</code></pre><p>那么<code>hexo new page &#39;postName&#39;</code>命令和<code>hexo new &#39;postName&#39;</code>有什么区别呢？</p><p><code>hexo new page &quot;my-second-blog&quot;</code>最终部署时生成：<code>hexo\public\my-second-blog\index.html</code>，但是它不会作为文章出现在博文目录。</p><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><p>hexo默认的代码高亮可能显示，可以自行使用<a href="https://highlightjs.org/usage/" target="_blank" rel="noopener">highlight.js</a></p><ul><li><a href="https://highlightjs.org/download/" target="_blank" rel="noopener">highlight.js 下载</a></li><li><a href="https://github.com/highlightjs/highlight.js/tree/master/src/styles" target="_blank" rel="noopener">highlight.js 样式</a></li><li><a href="https://highlightjs.org/static/demo/" target="_blank" rel="noopener">highlight.js demo</a></li><li><em>可以支持如下语言：*</em></li></ul><table><thead><tr><th>Language names</th><th>aliases</th></tr></thead><tbody><tr><td>1C</td><td>1c</td></tr><tr><td>ABNF</td><td>abnf</td></tr><tr><td>Access logs</td><td>accesslog</td></tr><tr><td>Ada</td><td>ada</td></tr><tr><td>ARM assembler</td><td>armasm, arm</td></tr><tr><td>AVR assembler</td><td>avrasm</td></tr><tr><td>ActionScript</td><td>actionscript, as</td></tr><tr><td>Apache</td><td>apache, apacheconf</td></tr><tr><td>AppleScript</td><td>applescript, osascript</td></tr><tr><td>AsciiDoc</td><td>asciidoc, adoc</td></tr><tr><td>AspectJ</td><td>aspectj</td></tr><tr><td>AutoHotkey</td><td>autohotkey</td></tr><tr><td>AutoIt</td><td>autoit</td></tr><tr><td>Awk</td><td>awk, mawk, nawk, gawk</td></tr><tr><td>Axapta</td><td>axapta</td></tr><tr><td>Bash</td><td>bash, sh, zsh</td></tr><tr><td>Basic</td><td>basic</td></tr><tr><td>BNF</td><td>bnf</td></tr><tr><td>Brainfuck</td><td>brainfuck, bf</td></tr><tr><td>C#</td><td>cs, csharp</td></tr><tr><td>C++</td><td>cpp, c, cc, h, c++, h++, hpp</td></tr><tr><td>C/AL</td><td>cal</td></tr><tr><td>Cache Object Script</td><td>cos, cls</td></tr><tr><td>CMake</td><td>cmake, cmake.in</td></tr><tr><td>Coq</td><td>coq</td></tr><tr><td>CSP</td><td>csp</td></tr><tr><td>CSS</td><td>css</td></tr><tr><td>Cap’n Proto</td><td>capnproto, capnp</td></tr><tr><td>Clojure</td><td>clojure, clj</td></tr><tr><td>CoffeeScript</td><td>coffeescript, coffee, cson, iced</td></tr><tr><td>Crmsh</td><td>crmsh, crm, pcmk</td></tr><tr><td>Crystal</td><td>crystal, cr</td></tr><tr><td>D</td><td>d</td></tr><tr><td>DNS Zone file</td><td>dns, zone, bind</td></tr><tr><td>DOS</td><td>dos, bat, cmd</td></tr><tr><td>Dart</td><td>dart</td></tr><tr><td>Delphi</td><td>delphi, dpr, dfm, pas, pascal, freepascal,lazarus, lpr, lfm</td></tr><tr><td>Diff</td><td>diff, patch</td></tr><tr><td>Django</td><td>django, jinja</td></tr><tr><td>Dockerfile</td><td>dockerfile, docker</td></tr><tr><td>dsconfig</td><td>dsconfig</td></tr><tr><td>DTS (Device Tree)</td><td>dts</td></tr><tr><td>Dust</td><td>dust, dst</td></tr><tr><td>EBNF</td><td>ebnf</td></tr><tr><td>Elixir</td><td>elixir</td></tr><tr><td>Elm</td><td>elm</td></tr><tr><td>Erlang</td><td>erlang, erl</td></tr><tr><td>Excel</td><td>excel, xls, xlsx</td></tr><tr><td>F#</td><td>fsharp, fs</td></tr><tr><td>FIX</td><td>fix</td></tr><tr><td>Fortran</td><td>fortran, f90, f95</td></tr><tr><td>G-Code</td><td>gcode, nc</td></tr><tr><td>Gams</td><td>gams, gms</td></tr><tr><td>GAUSS</td><td>gauss, gss</td></tr><tr><td>Gherkin</td><td>gherkin</td></tr><tr><td>Go</td><td>go, golang</td></tr><tr><td>Golo</td><td>golo, gololang</td></tr><tr><td>Gradle</td><td>gradle</td></tr><tr><td>Groovy</td><td>groovy</td></tr><tr><td>HTML, XML</td><td>xml, html, xhtml, rss, atom, xjb, xsd, xsl, plist</td></tr><tr><td>HTTP</td><td>http, https</td></tr><tr><td>Haml</td><td>haml</td></tr><tr><td>Handlebars</td><td>handlebars, hbs, html.hbs, html.handlebars</td></tr><tr><td>Haskell</td><td>haskell, hs</td></tr><tr><td>Haxe</td><td>haxe, hx</td></tr><tr><td>Hy</td><td>hy, hylang</td></tr><tr><td>Ini</td><td>ini</td></tr><tr><td>Inform7</td><td>inform7, i7</td></tr><tr><td>IRPF90</td><td>irpf90</td></tr><tr><td>JSON</td><td>json</td></tr><tr><td>Java</td><td>java, jsp</td></tr><tr><td>JavaScript</td><td>javascript, js, jsx</td></tr><tr><td>Leaf</td><td>leaf</td></tr><tr><td>Lasso</td><td>lasso, ls, lassoscript</td></tr><tr><td>Less</td><td>less</td></tr><tr><td>LDIF</td><td>ldif</td></tr><tr><td>Lisp</td><td>lisp</td></tr><tr><td>LiveCode Server</td><td>livecodeserver</td></tr><tr><td>LiveScript</td><td>livescript, ls</td></tr><tr><td>Lua</td><td>lua</td></tr><tr><td>Makefile</td><td>makefile, mk, mak</td></tr><tr><td>Markdown</td><td>markdown, md, mkdown, mkd</td></tr><tr><td>Mathematica</td><td>mathematica, mma</td></tr><tr><td>Matlab</td><td>matlab</td></tr><tr><td>Maxima</td><td>maxima</td></tr><tr><td>Maya Embedded Language</td><td>mel</td></tr><tr><td>Mercury</td><td>mercury</td></tr><tr><td>Mizar</td><td>mizar</td></tr><tr><td>Mojolicious</td><td>mojolicious</td></tr><tr><td>Monkey</td><td>monkey</td></tr><tr><td>Moonscript</td><td>moonscript, moon</td></tr><tr><td>N1QL</td><td>n1ql</td></tr><tr><td>NSIS</td><td>nsis</td></tr><tr><td>Nginx</td><td>nginx, nginxconf</td></tr><tr><td>Nimrod</td><td>nimrod, nim</td></tr><tr><td>Nix</td><td>nix</td></tr><tr><td>OCaml</td><td>ocaml, ml</td></tr><tr><td>Objective C</td><td>objectivec, mm, objc, obj-c</td></tr><tr><td>OpenGL Shading Language</td><td>glsl</td></tr><tr><td>OpenSCAD</td><td>openscad, scad</td></tr><tr><td>Oracle Rules Language</td><td>ruleslanguage</td></tr><tr><td>Oxygene</td><td>oxygene</td></tr><tr><td>PF</td><td>pf, pf.conf</td></tr><tr><td>PHP</td><td>php, php3, php4, php5, php6</td></tr><tr><td>Parser3</td><td>parser3</td></tr><tr><td>Perl</td><td>perl, pl, pm</td></tr><tr><td>Pony</td><td>pony</td></tr><tr><td>PowerShell</td><td>powershell, ps</td></tr><tr><td>Processing</td><td>processing</td></tr><tr><td>Prolog</td><td>prolog</td></tr><tr><td>Protocol Buffers</td><td>protobuf</td></tr><tr><td>Puppet</td><td>puppet, pp</td></tr><tr><td>Python</td><td>python, py, gyp</td></tr><tr><td>Python profiler results</td><td>profile</td></tr><tr><td>Q</td><td>k, kdb</td></tr><tr><td>QML</td><td>qml</td></tr><tr><td>R</td><td>r</td></tr><tr><td>RenderMan RIB</td><td>rib</td></tr><tr><td>RenderMan RSL</td><td>rsl</td></tr><tr><td>Roboconf</td><td>graph, instances</td></tr><tr><td>Ruby</td><td>ruby, rb, gemspec, podspec, thor, irb</td></tr><tr><td>Rust</td><td>rust, rs</td></tr><tr><td>SCSS</td><td>scss</td></tr><tr><td>SQL</td><td>sql</td></tr><tr><td>STEP Part 21</td><td>p21, step, stp</td></tr><tr><td>Scala</td><td>scala</td></tr><tr><td>Scheme</td><td>scheme</td></tr><tr><td>Scilab</td><td>scilab, sci</td></tr><tr><td>Shell</td><td>shell, console</td></tr><tr><td>Smali</td><td>smali</td></tr><tr><td>Smalltalk</td><td>smalltalk, st</td></tr><tr><td>Stan</td><td>stan</td></tr><tr><td>Stata</td><td>stata</td></tr><tr><td>Stylus</td><td>stylus, styl</td></tr><tr><td>SubUnit</td><td>subunit</td></tr><tr><td>Swift</td><td>swift</td></tr><tr><td>Test Anything Protocol</td><td>tap</td></tr><tr><td>Tcl</td><td>tcl, tk</td></tr><tr><td>TeX</td><td>tex</td></tr><tr><td>Thrift</td><td>thrift</td></tr><tr><td>TP</td><td>tp</td></tr><tr><td>Twig</td><td>twig, craftcms</td></tr><tr><td>TypeScript</td><td>typescript, ts</td></tr><tr><td>VB.Net</td><td>vbnet, vb</td></tr><tr><td>VBScript</td><td>vbscript, vbs</td></tr><tr><td>VHDL</td><td>vhdl</td></tr><tr><td>Vala</td><td>vala</td></tr><tr><td>Verilog</td><td>verilog, v</td></tr><tr><td>Vim Script</td><td>vim</td></tr><tr><td>x86 Assembly</td><td>x86asm</td></tr><tr><td>XL</td><td>xl, tao</td></tr><tr><td>XQuery</td><td>xpath, xq</td></tr><tr><td>Zephir</td><td>zephir, zep</td></tr></tbody></table><h1 id="hexo命令"><a href="#hexo命令" class="headerlink" title="hexo命令"></a>hexo命令</h1><ul><li>常用命令</li></ul><pre><code class="sh">hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）hexo deploy #部署到GitHubhexo help  # 查看帮助hexo version  #查看Hexo的版本</code></pre><ul><li>命令缩写</li></ul><pre><code class="sh">hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy</code></pre><ul><li>组合命令</li></ul><pre><code class="sh">hexo s -g #生成并本地预览hexo d -g #生成并上传</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍使用Github Pages和Hexo创建个人博客。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://gfding.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Gitbub Pages" scheme="https://gfding.com/tags/Gitbub-Pages/"/>
    
      <category term="Hexo" scheme="https://gfding.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
